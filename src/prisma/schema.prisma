// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  role          Role            @default(USER)
  email         String?
  username      String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Log       Log[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Customer {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  company String?
  remarks String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[]
  goods    Good[]
  invoices Invoice[]
  Log      Log[]
}

model Service {
  id                     String                 @id @default(auto()) @map("_id") @db.ObjectId
  serviceCode            String                 @unique
  serviceType            ServiceType
  serviceCalculationType ServiceCalculationType
  date                   DateTime
  paymentDate            DateTime?
  remarks                String?
  buyPrice               Int?                   @default(0)
  sellPrice              Int?                   @default(0)
  profit                 Int?                   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   String        @db.ObjectId
  invoice      Invoice?      @relation(fields: [invoiceId], references: [id])
  invoiceId    String?       @db.ObjectId
  serviceGoods ServiceGood[] @relation(fields: [], references: [])
}

model Invoice {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  invoiceCode String    @unique
  invoiceDate DateTime  @default(now())
  paymentDate DateTime?
  remarks     String?
  totalPrice  Int?      @default(0)
  tax         Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services   Service[]
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String    @db.ObjectId
}

model Good {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  specification String?
  packing       String?
  remarks       String?
  currentCount  Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceGoods ServiceGood[] @relation(fields: [], references: [])
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   String        @db.ObjectId
}

model ServiceGood {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  goodId     String @db.ObjectId
  serviceId  String @db.ObjectId
  customerId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  good            Good    @relation(fields: [goodId], references: [id], onDelete: Cascade)
  service         Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  goodCount       Int?    @default(0)
  containerNumber String?
  truckNumber     String?

  @@unique([goodId, serviceId]) // Define a composite unique constraint here
  @@index([goodId], map: "good_idx")
  @@index([serviceId], map: "service_idx")
}

model Log {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  action    LogAction
  object    LogObject
  details   String // The log message
  createdAt DateTime  @default(now())

  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [userId], references: [id])
}

enum LogObject {
  Service
  Customer
  Good
  Invoice
}

enum LogAction {
  Create
  Update
  Delete
}

enum ServiceType {
  Loading
  Unloading
  Repacking
  RepackingWeighing
  Stripping
  Overtime
  Storage
}

enum ServiceCalculationType {
  Add
  Substract
  Equal
}
